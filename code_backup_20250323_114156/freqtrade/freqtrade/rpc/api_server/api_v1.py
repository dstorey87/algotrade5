import logging
# REMOVED_UNUSED_CODE: from copy import deepcopy
# REMOVED_UNUSED_CODE: from typing import Annotated

# REMOVED_UNUSED_CODE: from fastapi import APIRouter, Depends, Query
from fastapi.exceptions import HTTPException

from freqtrade import __version__
# REMOVED_UNUSED_CODE: from freqtrade.data.history import get_datahandler
# REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: from freqtrade.enums import CandleType, RunMode, State, TradingMode
# REMOVED_UNUSED_CODE: from freqtrade.exceptions import OperationalException
from freqtrade.rpc import RPC
# REMOVED_UNUSED_CODE: from freqtrade.rpc.api_server.api_pairlists import handleExchangePayload
from freqtrade.rpc.api_server.api_schemas import (
vailablePairs,
alances,
lacklistPayload,
lacklistResponse,
ount,
ailyWeeklyMonthly,
eleteLockRequest,
eleteTrade,
ntry,
xchangeListResponse,
xit,
orceEnterPayload,
orceEnterResponse,
orceExitPayload,
# REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE:     FreqAIModelListResponse,
ealth,
yperoptLossListResponse,
ocks,
ocksPayload,
ogs,
arketRequest,
arketResponse,
ixTag,
penTradeSchema,
airCandlesRequest,
airHistory,
erformanceEntry,
# REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE:     Ping,
lotConfig,
rofit,
esultMsg,
howConfig,
tats,
tatusMsg,
trategyListResponse,
trategyResponse,
ysInfo,
ersion,
hitelistResponse,
# REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: )
# REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: # REMOVED_UNUSED_CODE: from freqtrade.rpc.api_server.deps import get_config, get_exchange, get_rpc, get_rpc_optional
from freqtrade.rpc.rpc import RPCException


# REMOVED_UNUSED_CODE: logger = logging.getLogger(__name__)

# API version
# Pre-1.1, no version was provided
# Version increments should happen in "small" steps (1.1, 1.12, ...) unless big changes happen.
# 1.11: forcebuy and forcesell accept ordertype
# 1.12: add blacklist delete endpoint
# 1.13: forcebuy supports stake_amount
# versions 2.xx -> futures/short branch
# 2.14: Add entry/exit orders to trade response
# 2.15: Add backtest history endpoints
# 2.16: Additional daily metrics
# 2.17: Forceentry - leverage, partial force_exit
# 2.20: Add websocket endpoints
# 2.21: Add new_candle messagetype
# 2.22: Add FreqAI to backtesting
# 2.23: Allow plot config request in webserver mode
# 2.24: Add cancel_open_order endpoint
# 2.25: Add several profit values to /status endpoint
# 2.26: increase /balance output
# 2.27: Add /trades/<id>/reload endpoint
# 2.28: Switch reload endpoint to Post
# 2.29: Add /exchanges endpoint
# 2.30: new /pairlists endpoint
# 2.31: new /backtest/history/ delete endpoint
# 2.32: new /backtest/history/ patch endpoint
# 2.33: Additional weekly/monthly metrics
# 2.34: new entries/exits/mix_tags endpoints
# 2.35: pair_candles and pair_history endpoints as Post variant
# 2.40: Add hyperopt-loss endpoint
# 2.41: Add download-data endpoint
# 2.42: Add /pair_history endpoint with live data
# REMOVED_UNUSED_CODE: API_VERSION = 2.42

# Public API, requires no auth.
# REMOVED_UNUSED_CODE: router_public = APIRouter()
# Private API, protected by authentication
router = APIRouter()


# REMOVED_UNUSED_CODE: @router_public.get("/ping", response_model=Ping)
# REMOVED_UNUSED_CODE: def ping():
# REMOVED_UNUSED_CODE:     """simple ping"""
# REMOVED_UNUSED_CODE:     return {"status": "pong"}


# REMOVED_UNUSED_CODE: @router.get("/version", response_model=Version, tags=["info"])
def version():
    """Bot Version info"""
    return {"version": __version__}


# REMOVED_UNUSED_CODE: @router.get("/balance", response_model=Balances, tags=["info"])
# REMOVED_UNUSED_CODE: def balance(rpc: RPC = Depends(get_rpc), config=Depends(get_config)):
# REMOVED_UNUSED_CODE:     """Account Balances"""
# REMOVED_UNUSED_CODE:     return rpc._rpc_balance(
# REMOVED_UNUSED_CODE:         config["stake_currency"],
# REMOVED_UNUSED_CODE:         config.get("fiat_display_currency", ""),
# REMOVED_UNUSED_CODE:     )


# REMOVED_UNUSED_CODE: @router.get("/count", response_model=Count, tags=["info"])
# REMOVED_UNUSED_CODE: def count(rpc: RPC = Depends(get_rpc)):
# REMOVED_UNUSED_CODE:     return rpc._rpc_count()


# REMOVED_UNUSED_CODE: @router.get("/entries", response_model=list[Entry], tags=["info"])
# REMOVED_UNUSED_CODE: def entries(pair: str | None = None, rpc: RPC = Depends(get_rpc)):
# REMOVED_UNUSED_CODE:     return rpc._rpc_enter_tag_performance(pair)


# REMOVED_UNUSED_CODE: @router.get("/exits", response_model=list[Exit], tags=["info"])
# REMOVED_UNUSED_CODE: def exits(pair: str | None = None, rpc: RPC = Depends(get_rpc)):
# REMOVED_UNUSED_CODE:     return rpc._rpc_exit_reason_performance(pair)


# REMOVED_UNUSED_CODE: @router.get("/mix_tags", response_model=list[MixTag], tags=["info"])
# REMOVED_UNUSED_CODE: def mix_tags(pair: str | None = None, rpc: RPC = Depends(get_rpc)):
# REMOVED_UNUSED_CODE:     return rpc._rpc_mix_tag_performance(pair)


# REMOVED_UNUSED_CODE: @router.get("/performance", response_model=list[PerformanceEntry], tags=["info"])
# REMOVED_UNUSED_CODE: def performance(rpc: RPC = Depends(get_rpc)):
# REMOVED_UNUSED_CODE:     return rpc._rpc_performance()


# REMOVED_UNUSED_CODE: @router.get("/profit", response_model=Profit, tags=["info"])
# REMOVED_UNUSED_CODE: def profit(rpc: RPC = Depends(get_rpc), config=Depends(get_config)):
# REMOVED_UNUSED_CODE:     return rpc._rpc_trade_statistics(config["stake_currency"], config.get("fiat_display_currency"))


# REMOVED_UNUSED_CODE: @router.get("/stats", response_model=Stats, tags=["info"])
# REMOVED_UNUSED_CODE: def stats(rpc: RPC = Depends(get_rpc)):
# REMOVED_UNUSED_CODE:     return rpc._rpc_stats()


# REMOVED_UNUSED_CODE: @router.get("/daily", response_model=DailyWeeklyMonthly, tags=["info"])
# REMOVED_UNUSED_CODE: def daily(timescale: int = 7, rpc: RPC = Depends(get_rpc), config=Depends(get_config)):
# REMOVED_UNUSED_CODE:     return rpc._rpc_timeunit_profit(
# REMOVED_UNUSED_CODE:         timescale, config["stake_currency"], config.get("fiat_display_currency", "")
# REMOVED_UNUSED_CODE:     )


# REMOVED_UNUSED_CODE: @router.get("/weekly", response_model=DailyWeeklyMonthly, tags=["info"])
# REMOVED_UNUSED_CODE: def weekly(timescale: int = 4, rpc: RPC = Depends(get_rpc), config=Depends(get_config)):
# REMOVED_UNUSED_CODE:     return rpc._rpc_timeunit_profit(
# REMOVED_UNUSED_CODE:         timescale, config["stake_currency"], config.get("fiat_display_currency", ""), "weeks"
# REMOVED_UNUSED_CODE:     )


# REMOVED_UNUSED_CODE: @router.get("/monthly", response_model=DailyWeeklyMonthly, tags=["info"])
# REMOVED_UNUSED_CODE: def monthly(timescale: int = 3, rpc: RPC = Depends(get_rpc), config=Depends(get_config)):
# REMOVED_UNUSED_CODE:     return rpc._rpc_timeunit_profit(
# REMOVED_UNUSED_CODE:         timescale, config["stake_currency"], config.get("fiat_display_currency", ""), "months"
# REMOVED_UNUSED_CODE:     )


# REMOVED_UNUSED_CODE: @router.get("/status", response_model=list[OpenTradeSchema], tags=["info"])
# REMOVED_UNUSED_CODE: def status(rpc: RPC = Depends(get_rpc)):
# REMOVED_UNUSED_CODE:     try:
# REMOVED_UNUSED_CODE:         return rpc._rpc_trade_status()
# REMOVED_UNUSED_CODE:     except RPCException:
# REMOVED_UNUSED_CODE:         return []


# Using the responsemodel here will cause a ~100% increase in response time (from 1s to 2s)
# on big databases. Correct response model: response_model=TradeResponse,
# REMOVED_UNUSED_CODE: @router.get("/trades", tags=["info", "trading"])
# REMOVED_UNUSED_CODE: def trades(limit: int = 500, offset: int = 0, rpc: RPC = Depends(get_rpc)):
# REMOVED_UNUSED_CODE:     return rpc._rpc_trade_history(limit, offset=offset, order_by_id=True)


@router.get("/trade/{tradeid}", response_model=OpenTradeSchema, tags=["info", "trading"])
def trade(tradeid: int = 0, rpc: RPC = Depends(get_rpc)):
    try:
        return rpc._rpc_trade_status([tradeid])[0]
    except (RPCException, KeyError):
        raise HTTPException(status_code=404, detail="Trade not found.")


# REMOVED_UNUSED_CODE: @router.delete("/trades/{tradeid}", response_model=DeleteTrade, tags=["info", "trading"])
# REMOVED_UNUSED_CODE: def trades_delete(tradeid: int, rpc: RPC = Depends(get_rpc)):
# REMOVED_UNUSED_CODE:     return rpc._rpc_delete(tradeid)


# REMOVED_UNUSED_CODE: @router.delete("/trades/{tradeid}/open-order", response_model=OpenTradeSchema, tags=["trading"])
# REMOVED_UNUSED_CODE: def trade_cancel_open_order(tradeid: int, rpc: RPC = Depends(get_rpc)):
# REMOVED_UNUSED_CODE:     rpc._rpc_cancel_open_order(tradeid)
# REMOVED_UNUSED_CODE:     return rpc._rpc_trade_status([tradeid])[0]


# REMOVED_UNUSED_CODE: @router.post("/trades/{tradeid}/reload", response_model=OpenTradeSchema, tags=["trading"])
# REMOVED_UNUSED_CODE: def trade_reload(tradeid: int, rpc: RPC = Depends(get_rpc)):
# REMOVED_UNUSED_CODE:     rpc._rpc_reload_trade_from_exchange(tradeid)
# REMOVED_UNUSED_CODE:     return rpc._rpc_trade_status([tradeid])[0]


# TODO: Missing response model
# REMOVED_UNUSED_CODE: @router.get("/edge", tags=["info"])
# REMOVED_UNUSED_CODE: def edge(rpc: RPC = Depends(get_rpc)):
# REMOVED_UNUSED_CODE:     return rpc._rpc_edge()


# REMOVED_UNUSED_CODE: @router.get("/show_config", response_model=ShowConfig, tags=["info"])
# REMOVED_UNUSED_CODE: def show_config(rpc: RPC | None = Depends(get_rpc_optional), config=Depends(get_config)):
# REMOVED_UNUSED_CODE:     state: State | str = ""
# REMOVED_UNUSED_CODE:     strategy_version = None
# REMOVED_UNUSED_CODE:     if rpc:
# REMOVED_UNUSED_CODE:         state = rpc._freqtrade.state
# REMOVED_UNUSED_CODE:         strategy_version = rpc._freqtrade.strategy.version()
# REMOVED_UNUSED_CODE:     resp = RPC._rpc_show_config(config, state, strategy_version)
# REMOVED_UNUSED_CODE:     resp["api_version"] = API_VERSION
# REMOVED_UNUSED_CODE:     return resp


# /forcebuy is deprecated with short addition. use /forceentry instead
# REMOVED_UNUSED_CODE: @router.post("/forceenter", response_model=ForceEnterResponse, tags=["trading"])
# REMOVED_UNUSED_CODE: @router.post("/forcebuy", response_model=ForceEnterResponse, tags=["trading"])
# REMOVED_UNUSED_CODE: def force_entry(payload: ForceEnterPayload, rpc: RPC = Depends(get_rpc)):
# REMOVED_UNUSED_CODE:     ordertype = payload.ordertype.value if payload.ordertype else None
# REMOVED_UNUSED_CODE: 
# REMOVED_UNUSED_CODE:     trade = rpc._rpc_force_entry(
# REMOVED_UNUSED_CODE:         payload.pair,
# REMOVED_UNUSED_CODE:         payload.price,
# REMOVED_UNUSED_CODE:         order_side=payload.side,
# REMOVED_UNUSED_CODE:         order_type=ordertype,
# REMOVED_UNUSED_CODE:         stake_amount=payload.stakeamount,
# REMOVED_UNUSED_CODE:         enter_tag=payload.entry_tag or "force_entry",
# REMOVED_UNUSED_CODE:         leverage=payload.leverage,
# REMOVED_UNUSED_CODE:     )
# REMOVED_UNUSED_CODE: 
# REMOVED_UNUSED_CODE:     if trade:
# REMOVED_UNUSED_CODE:         return ForceEnterResponse.model_validate(trade.to_json())
# REMOVED_UNUSED_CODE:     else:
# REMOVED_UNUSED_CODE:         return ForceEnterResponse.model_validate(
# REMOVED_UNUSED_CODE:             {"status": f"Error entering {payload.side} trade for pair {payload.pair}."}
# REMOVED_UNUSED_CODE:         )


# /forcesell is deprecated with short addition. use /forceexit instead
# REMOVED_UNUSED_CODE: @router.post("/forceexit", response_model=ResultMsg, tags=["trading"])
# REMOVED_UNUSED_CODE: @router.post("/forcesell", response_model=ResultMsg, tags=["trading"])
# REMOVED_UNUSED_CODE: def forceexit(payload: ForceExitPayload, rpc: RPC = Depends(get_rpc)):
# REMOVED_UNUSED_CODE:     ordertype = payload.ordertype.value if payload.ordertype else None
# REMOVED_UNUSED_CODE:     return rpc._rpc_force_exit(str(payload.tradeid), ordertype, amount=payload.amount)


# REMOVED_UNUSED_CODE: @router.get("/blacklist", response_model=BlacklistResponse, tags=["info", "pairlist"])
def blacklist(rpc: RPC = Depends(get_rpc)):
    return rpc._rpc_blacklist()


# REMOVED_UNUSED_CODE: @router.post("/blacklist", response_model=BlacklistResponse, tags=["info", "pairlist"])
# REMOVED_UNUSED_CODE: def blacklist_post(payload: BlacklistPayload, rpc: RPC = Depends(get_rpc)):
# REMOVED_UNUSED_CODE:     return rpc._rpc_blacklist(payload.blacklist)


# REMOVED_UNUSED_CODE: @router.delete("/blacklist", response_model=BlacklistResponse, tags=["info", "pairlist"])
# REMOVED_UNUSED_CODE: def blacklist_delete(pairs_to_delete: list[str] = Query([]), rpc: RPC = Depends(get_rpc)):
# REMOVED_UNUSED_CODE:     """Provide a list of pairs to delete from the blacklist"""
# REMOVED_UNUSED_CODE: 
# REMOVED_UNUSED_CODE:     return rpc._rpc_blacklist_delete(pairs_to_delete)


# REMOVED_UNUSED_CODE: @router.get("/whitelist", response_model=WhitelistResponse, tags=["info", "pairlist"])
# REMOVED_UNUSED_CODE: def whitelist(rpc: RPC = Depends(get_rpc)):
# REMOVED_UNUSED_CODE:     return rpc._rpc_whitelist()


# REMOVED_UNUSED_CODE: @router.get("/locks", response_model=Locks, tags=["info", "locks"])
# REMOVED_UNUSED_CODE: def locks(rpc: RPC = Depends(get_rpc)):
# REMOVED_UNUSED_CODE:     return rpc._rpc_locks()


# REMOVED_UNUSED_CODE: @router.delete("/locks/{lockid}", response_model=Locks, tags=["info", "locks"])
# REMOVED_UNUSED_CODE: def delete_lock(lockid: int, rpc: RPC = Depends(get_rpc)):
# REMOVED_UNUSED_CODE:     return rpc._rpc_delete_lock(lockid=lockid)


# REMOVED_UNUSED_CODE: @router.post("/locks/delete", response_model=Locks, tags=["info", "locks"])
# REMOVED_UNUSED_CODE: def delete_lock_pair(payload: DeleteLockRequest, rpc: RPC = Depends(get_rpc)):
# REMOVED_UNUSED_CODE:     return rpc._rpc_delete_lock(lockid=payload.lockid, pair=payload.pair)


# REMOVED_UNUSED_CODE: @router.post("/locks", response_model=Locks, tags=["info", "locks"])
# REMOVED_UNUSED_CODE: def add_locks(payload: list[LocksPayload], rpc: RPC = Depends(get_rpc)):
# REMOVED_UNUSED_CODE:     for lock in payload:
# REMOVED_UNUSED_CODE:         rpc._rpc_add_lock(lock.pair, lock.until, lock.reason, lock.side)
# REMOVED_UNUSED_CODE:     return rpc._rpc_locks()


# REMOVED_UNUSED_CODE: @router.get("/logs", response_model=Logs, tags=["info"])
# REMOVED_UNUSED_CODE: def logs(limit: int | None = None):
# REMOVED_UNUSED_CODE:     return RPC._rpc_get_logs(limit)


# REMOVED_UNUSED_CODE: @router.post("/start", response_model=StatusMsg, tags=["botcontrol"])
# REMOVED_UNUSED_CODE: def start(rpc: RPC = Depends(get_rpc)):
# REMOVED_UNUSED_CODE:     return rpc._rpc_start()


# REMOVED_UNUSED_CODE: @router.post("/stop", response_model=StatusMsg, tags=["botcontrol"])
# REMOVED_UNUSED_CODE: def stop(rpc: RPC = Depends(get_rpc)):
# REMOVED_UNUSED_CODE:     return rpc._rpc_stop()


# REMOVED_UNUSED_CODE: @router.post("/stopentry", response_model=StatusMsg, tags=["botcontrol"])
# REMOVED_UNUSED_CODE: @router.post("/stopbuy", response_model=StatusMsg, tags=["botcontrol"])
# REMOVED_UNUSED_CODE: def stop_buy(rpc: RPC = Depends(get_rpc)):
# REMOVED_UNUSED_CODE:     return rpc._rpc_stopentry()


# REMOVED_UNUSED_CODE: @router.post("/reload_config", response_model=StatusMsg, tags=["botcontrol"])
# REMOVED_UNUSED_CODE: def reload_config(rpc: RPC = Depends(get_rpc)):
# REMOVED_UNUSED_CODE:     return rpc._rpc_reload_config()


# REMOVED_UNUSED_CODE: @router.get("/pair_candles", response_model=PairHistory, tags=["candle data"])
# REMOVED_UNUSED_CODE: def pair_candles(pair: str, timeframe: str, limit: int | None = None, rpc: RPC = Depends(get_rpc)):
# REMOVED_UNUSED_CODE:     return rpc._rpc_analysed_dataframe(pair, timeframe, limit, None)


# REMOVED_UNUSED_CODE: @router.post("/pair_candles", response_model=PairHistory, tags=["candle data"])
# REMOVED_UNUSED_CODE: def pair_candles_filtered(payload: PairCandlesRequest, rpc: RPC = Depends(get_rpc)):
# REMOVED_UNUSED_CODE:     # Advanced pair_candles endpoint with column filtering
# REMOVED_UNUSED_CODE:     return rpc._rpc_analysed_dataframe(
# REMOVED_UNUSED_CODE:         payload.pair, payload.timeframe, payload.limit, payload.columns
# REMOVED_UNUSED_CODE:     )


# REMOVED_UNUSED_CODE: @router.get("/plot_config", response_model=PlotConfig, tags=["candle data"])
# REMOVED_UNUSED_CODE: def plot_config(
# REMOVED_UNUSED_CODE:     strategy: str | None = None,
# REMOVED_UNUSED_CODE:     config=Depends(get_config),
# REMOVED_UNUSED_CODE:     rpc: RPC | None = Depends(get_rpc_optional),
# REMOVED_UNUSED_CODE: ):
# REMOVED_UNUSED_CODE:     if not strategy:
# REMOVED_UNUSED_CODE:         if not rpc:
# REMOVED_UNUSED_CODE:             raise RPCException("Strategy is mandatory in webserver mode.")
# REMOVED_UNUSED_CODE:         return PlotConfig.model_validate(rpc._rpc_plot_config())
# REMOVED_UNUSED_CODE:     else:
# REMOVED_UNUSED_CODE:         config1 = deepcopy(config)
# REMOVED_UNUSED_CODE:         config1.update({"strategy": strategy})
# REMOVED_UNUSED_CODE:     try:
# REMOVED_UNUSED_CODE:         return PlotConfig.model_validate(RPC._rpc_plot_config_with_strategy(config1))
# REMOVED_UNUSED_CODE:     except Exception as e:
# REMOVED_UNUSED_CODE:         raise HTTPException(status_code=502, detail=str(e))


# REMOVED_UNUSED_CODE: @router.get("/strategies", response_model=StrategyListResponse, tags=["strategy"])
# REMOVED_UNUSED_CODE: def list_strategies(config=Depends(get_config)):
# REMOVED_UNUSED_CODE:     from freqtrade.resolvers.strategy_resolver import StrategyResolver
# REMOVED_UNUSED_CODE: 
# REMOVED_UNUSED_CODE:     strategies = StrategyResolver.search_all_objects(
# REMOVED_UNUSED_CODE:         config, False, config.get("recursive_strategy_search", False)
# REMOVED_UNUSED_CODE:     )
# REMOVED_UNUSED_CODE:     strategies = sorted(strategies, key=lambda x: x["name"])
# REMOVED_UNUSED_CODE: 
# REMOVED_UNUSED_CODE:     return {"strategies": [x["name"] for x in strategies]}


# REMOVED_UNUSED_CODE: @router.get("/strategy/{strategy}", response_model=StrategyResponse, tags=["strategy"])
# REMOVED_UNUSED_CODE: def get_strategy(strategy: str, config=Depends(get_config)):
# REMOVED_UNUSED_CODE:     if ":" in strategy:
# REMOVED_UNUSED_CODE:         raise HTTPException(status_code=500, detail="base64 encoded strategies are not allowed.")
# REMOVED_UNUSED_CODE: 
# REMOVED_UNUSED_CODE:     config_ = deepcopy(config)
# REMOVED_UNUSED_CODE:     from freqtrade.resolvers.strategy_resolver import StrategyResolver
# REMOVED_UNUSED_CODE: 
# REMOVED_UNUSED_CODE:     try:
# REMOVED_UNUSED_CODE:         strategy_obj = StrategyResolver._load_strategy(
# REMOVED_UNUSED_CODE:             strategy, config_, extra_dir=config_.get("strategy_path")
# REMOVED_UNUSED_CODE:         )
# REMOVED_UNUSED_CODE:     except OperationalException:
# REMOVED_UNUSED_CODE:         raise HTTPException(status_code=404, detail="Strategy not found")
# REMOVED_UNUSED_CODE:     except Exception as e:
# REMOVED_UNUSED_CODE:         raise HTTPException(status_code=502, detail=str(e))
# REMOVED_UNUSED_CODE:     return {
# REMOVED_UNUSED_CODE:         "strategy": strategy_obj.get_strategy_name(),
# REMOVED_UNUSED_CODE:         "code": strategy_obj.__source__,
# REMOVED_UNUSED_CODE:         "timeframe": getattr(strategy_obj, "timeframe", None),
# REMOVED_UNUSED_CODE:     }


# REMOVED_UNUSED_CODE: @router.get("/exchanges", response_model=ExchangeListResponse, tags=[])
# REMOVED_UNUSED_CODE: def list_exchanges(config=Depends(get_config)):
# REMOVED_UNUSED_CODE:     from freqtrade.exchange import list_available_exchanges
# REMOVED_UNUSED_CODE: 
# REMOVED_UNUSED_CODE:     exchanges = list_available_exchanges(config)
# REMOVED_UNUSED_CODE:     return {
# REMOVED_UNUSED_CODE:         "exchanges": exchanges,
# REMOVED_UNUSED_CODE:     }


# REMOVED_UNUSED_CODE: @router.get(
# REMOVED_UNUSED_CODE:     "/hyperoptloss", response_model=HyperoptLossListResponse, tags=["hyperopt", "webserver"]
# REMOVED_UNUSED_CODE: )
# REMOVED_UNUSED_CODE: def list_hyperoptloss(
# REMOVED_UNUSED_CODE:     config=Depends(get_config),
# REMOVED_UNUSED_CODE: ):
# REMOVED_UNUSED_CODE:     import textwrap
# REMOVED_UNUSED_CODE: 
# REMOVED_UNUSED_CODE:     from freqtrade.resolvers.hyperopt_resolver import HyperOptLossResolver
# REMOVED_UNUSED_CODE: 
# REMOVED_UNUSED_CODE:     loss_functions = HyperOptLossResolver.search_all_objects(config, False)
# REMOVED_UNUSED_CODE:     loss_functions = sorted(loss_functions, key=lambda x: x["name"])
# REMOVED_UNUSED_CODE: 
# REMOVED_UNUSED_CODE:     return {
# REMOVED_UNUSED_CODE:         "loss_functions": [
# REMOVED_UNUSED_CODE:             {
# REMOVED_UNUSED_CODE:                 "name": x["name"],
# REMOVED_UNUSED_CODE:                 "description": textwrap.dedent((x["class"].__doc__ or "").strip()),
# REMOVED_UNUSED_CODE:             }
# REMOVED_UNUSED_CODE:             for x in loss_functions
# REMOVED_UNUSED_CODE:         ]
# REMOVED_UNUSED_CODE:     }


# REMOVED_UNUSED_CODE: @router.get("/freqaimodels", response_model=FreqAIModelListResponse, tags=["freqai"])
# REMOVED_UNUSED_CODE: def list_freqaimodels(config=Depends(get_config)):
# REMOVED_UNUSED_CODE:     from freqtrade.resolvers.freqaimodel_resolver import FreqaiModelResolver
# REMOVED_UNUSED_CODE: 
# REMOVED_UNUSED_CODE:     models = FreqaiModelResolver.search_all_objects(config, False)
# REMOVED_UNUSED_CODE:     models = sorted(models, key=lambda x: x["name"])
# REMOVED_UNUSED_CODE: 
# REMOVED_UNUSED_CODE:     return {"freqaimodels": [x["name"] for x in models]}


# REMOVED_UNUSED_CODE: @router.get("/available_pairs", response_model=AvailablePairs, tags=["candle data"])
# REMOVED_UNUSED_CODE: def list_available_pairs(
# REMOVED_UNUSED_CODE:     timeframe: str | None = None,
# REMOVED_UNUSED_CODE:     stake_currency: str | None = None,
# REMOVED_UNUSED_CODE:     candletype: CandleType | None = None,
# REMOVED_UNUSED_CODE:     config=Depends(get_config),
# REMOVED_UNUSED_CODE: ):
# REMOVED_UNUSED_CODE:     dh = get_datahandler(config["datadir"], config.get("dataformat_ohlcv"))
# REMOVED_UNUSED_CODE:     trading_mode: TradingMode = config.get("trading_mode", TradingMode.SPOT)
# REMOVED_UNUSED_CODE:     pair_interval = dh.ohlcv_get_available_data(config["datadir"], trading_mode)
# REMOVED_UNUSED_CODE: 
# REMOVED_UNUSED_CODE:     if timeframe:
# REMOVED_UNUSED_CODE:         pair_interval = [pair for pair in pair_interval if pair[1] == timeframe]
# REMOVED_UNUSED_CODE:     if stake_currency:
# REMOVED_UNUSED_CODE:         pair_interval = [pair for pair in pair_interval if pair[0].endswith(stake_currency)]
# REMOVED_UNUSED_CODE:     if candletype:
# REMOVED_UNUSED_CODE:         pair_interval = [pair for pair in pair_interval if pair[2] == candletype]
# REMOVED_UNUSED_CODE:     else:
# REMOVED_UNUSED_CODE:         candle_type = CandleType.get_default(trading_mode)
# REMOVED_UNUSED_CODE:         pair_interval = [pair for pair in pair_interval if pair[2] == candle_type]
# REMOVED_UNUSED_CODE: 
# REMOVED_UNUSED_CODE:     pair_interval = sorted(pair_interval, key=lambda x: x[0])
# REMOVED_UNUSED_CODE: 
# REMOVED_UNUSED_CODE:     pairs = list({x[0] for x in pair_interval})
# REMOVED_UNUSED_CODE:     pairs.sort()
# REMOVED_UNUSED_CODE:     result = {
# REMOVED_UNUSED_CODE:         "length": len(pairs),
# REMOVED_UNUSED_CODE:         "pairs": pairs,
# REMOVED_UNUSED_CODE:         "pair_interval": pair_interval,
# REMOVED_UNUSED_CODE:     }
# REMOVED_UNUSED_CODE:     return result


# REMOVED_UNUSED_CODE: @router.get("/markets", response_model=MarketResponse, tags=["candle data", "webserver"])
# REMOVED_UNUSED_CODE: def markets(
# REMOVED_UNUSED_CODE:     query: Annotated[MarketRequest, Query()],
# REMOVED_UNUSED_CODE:     config=Depends(get_config),
# REMOVED_UNUSED_CODE:     rpc: RPC | None = Depends(get_rpc_optional),
# REMOVED_UNUSED_CODE: ):
# REMOVED_UNUSED_CODE:     if not rpc or config["runmode"] == RunMode.WEBSERVER:
# REMOVED_UNUSED_CODE:         # webserver mode
# REMOVED_UNUSED_CODE:         config_loc = deepcopy(config)
# REMOVED_UNUSED_CODE:         handleExchangePayload(query, config_loc)
# REMOVED_UNUSED_CODE:         exchange = get_exchange(config_loc)
# REMOVED_UNUSED_CODE:     else:
# REMOVED_UNUSED_CODE:         exchange = rpc._freqtrade.exchange
# REMOVED_UNUSED_CODE: 
# REMOVED_UNUSED_CODE:     return {
# REMOVED_UNUSED_CODE:         "markets": exchange.get_markets(
# REMOVED_UNUSED_CODE:             base_currencies=[query.base] if query.base else None,
# REMOVED_UNUSED_CODE:             quote_currencies=[query.quote] if query.quote else None,
# REMOVED_UNUSED_CODE:         ),
# REMOVED_UNUSED_CODE:         "exchange_id": exchange.id,
# REMOVED_UNUSED_CODE:     }


# REMOVED_UNUSED_CODE: @router.get("/sysinfo", response_model=SysInfo, tags=["info"])
# REMOVED_UNUSED_CODE: def sysinfo():
# REMOVED_UNUSED_CODE:     return RPC._rpc_sysinfo()


@router.get("/health", response_model=Health, tags=["info"])
def health(rpc: RPC = Depends(get_rpc)):
    return rpc.health()
