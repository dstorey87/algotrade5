diff --git a/frontend/app/layout.tsx b/frontend/app/layout.tsx
index 68c4de1..e4dd874 100644
--- a/frontend/app/layout.tsx
+++ b/frontend/app/layout.tsx
@@ -1,11 +1,6 @@
+// Root layout (Server Component)
 import { Metadata } from 'next'
-import { AppRouterCacheProvider } from '@mui/material-nextjs/v14-appRouter'
-import { WebSocketErrorBoundary } from '@/components/ErrorBoundary/WebSocketErrorBoundary'
-import { Chart as ChartJS } from 'chart.js'
-
-// Configure global chart styles for dark theme
-ChartJS.defaults.color = 'rgba(255, 255, 255, 0.87)'
-ChartJS.defaults.borderColor = 'rgba(255, 255, 255, 0.1)'
+import ClientLayout from './ClientLayout'
 
 export const metadata: Metadata = {
   title: 'AlgoTradePro5',
@@ -20,11 +15,7 @@ export default function RootLayout({
   return (
     <html lang="en">
       <body>
-        <AppRouterCacheProvider>
-          <WebSocketErrorBoundary>
-            {children}
-          </WebSocketErrorBoundary>
-        </AppRouterCacheProvider>
+        <ClientLayout>{children}</ClientLayout>
       </body>
     </html>
   )
diff --git a/frontend/app/page.tsx b/frontend/app/page.tsx
index 95004b0..dbaf90c 100644
--- a/frontend/app/page.tsx
+++ b/frontend/app/page.tsx
@@ -1,10 +1,194 @@
-import { TradeMonitor } from '@/components/RealTimeMonitoring/TradeMonitor'
-import { Container } from '@mui/material'
+'use client';
 
+import React, { useEffect } from 'react';
+import { 
+  Box, 
+  Typography, 
+  Container, 
+  Grid, 
+  Paper, 
+  Card, 
+  CardContent,
+  Button,
+  LinearProgress
+} from '@mui/material';
+import { logger } from '@/src/utils/logger';
+
+/**
+ * Home Page Component for AlgoTradePro5 Dashboard
+ * 
+ * This component displays the main dashboard with:
+ * - Key trading metrics
+ * - Strategy status information
+ * - Recent activity feed
+ * - System health indicators
+ */
 export default function Home() {
+  // Log page initialization to help debug routing issues
+  useEffect(() => {
+    logger.info('Dashboard page mounted', { route: '/' });
+    
+    // Check for any routing conflicts and log them
+    if (typeof window !== 'undefined') {
+      logger.debug('Current URL:', { 
+        pathname: window.location.pathname,
+        search: window.location.search,
+        hash: window.location.hash
+      });
+    }
+    
+    return () => {
+      logger.debug('Dashboard page unmounted');
+    };
+  }, []);
+
   return (
-    <Container maxWidth={false} sx={{ height: '100vh', py: 3 }}>
-      <TradeMonitor />
+    <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
+      {/* Page Header */}
+      <Typography variant="h3" component="h1" gutterBottom sx={{ fontWeight: 'bold', color: '#1976d2' }}>
+        AlgoTradePro5 Dashboard
+      </Typography>
+      
+      <Typography variant="subtitle1" gutterBottom sx={{ mb: 4 }}>
+        AI-driven cryptocurrency trading system with quantum loop backtesting
+      </Typography>
+      
+      {/* Summary Metrics Cards */}
+      <Grid container spacing={3} sx={{ mb: 4 }}>
+        {/* Initial Investment Card */}
+        <Grid item xs={12} sm={6} md={3}>
+          <Card elevation={3}>
+            <CardContent sx={{ textAlign: 'center' }}>
+              <Typography variant="h5" color="primary">£10.00</Typography>
+              <Typography variant="body2" color="textSecondary">Initial Investment</Typography>
+            </CardContent>
+          </Card>
+        </Grid>
+        
+        {/* Current Balance Card */}
+        <Grid item xs={12} sm={6} md={3}>
+          <Card elevation={3}>
+            <CardContent sx={{ textAlign: 'center' }}>
+              <Typography variant="h5" color="primary">£0.00</Typography>
+              <Typography variant="body2" color="textSecondary">Current Balance</Typography>
+            </CardContent>
+          </Card>
+        </Grid>
+        
+        {/* Profit/Loss Card */}
+        <Grid item xs={12} sm={6} md={3}>
+          <Card elevation={3}>
+            <CardContent sx={{ textAlign: 'center' }}>
+              <Typography variant="h5" color="error">0.00%</Typography>
+              <Typography variant="body2" color="textSecondary">Profit/Loss</Typography>
+            </CardContent>
+          </Card>
+        </Grid>
+        
+        {/* Win/Loss Ratio Card */}
+        <Grid item xs={12} sm={6} md={3}>
+          <Card elevation={3}>
+            <CardContent sx={{ textAlign: 'center' }}>
+              <Typography variant="h5" color="primary">0/0</Typography>
+              <Typography variant="body2" color="textSecondary">Win/Loss Ratio</Typography>
+            </CardContent>
+          </Card>
+        </Grid>
+      </Grid>
+      
+      {/* Main Dashboard Content */}
+      <Grid container spacing={3}>
+        {/* AI Strategy Status Panel */}
+        <Grid item xs={12} md={6}>
+          <Paper elevation={3} sx={{ p: 2, display: 'flex', flexDirection: 'column' }}>
+            <Typography variant="h6" gutterBottom>AI Strategy Status</Typography>
+            
+            {/* Quantum Loop Progress Bar */}
+            <Box sx={{ mb: 2 }}>
+              <Typography variant="body2" color="textSecondary" gutterBottom>
+                Quantum Loop Progress
+              </Typography>
+              <LinearProgress variant="determinate" value={0} sx={{ height: 10, borderRadius: 5 }} />
+              <Typography variant="caption" color="textSecondary" align="right" display="block">
+                0%
+              </Typography>
+            </Box>
+            
+            {/* Strategy Status Indicators */}
+            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
+              <Typography variant="body2">Strategy Generation:</Typography>
+              <Typography variant="body2" color="textSecondary">Initializing</Typography>
+            </Box>
+            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
+              <Typography variant="body2">Backtesting Status:</Typography>
+              <Typography variant="body2" color="textSecondary">Pending</Typography>
+            </Box>
+            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
+              <Typography variant="body2">LLM Analysis:</Typography>
+              <Typography variant="body2" color="textSecondary">Ready</Typography>
+            </Box>
+            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
+              <Typography variant="body2">Trading Status:</Typography>
+              <Typography variant="body2" color="error">Offline</Typography>
+            </Box>
+            
+            {/* Action Button */}
+            <Button variant="contained" color="primary" sx={{ mt: 2 }}>
+              Initialize Trading
+            </Button>
+          </Paper>
+        </Grid>
+        
+        {/* Recent Activity Panel */}
+        <Grid item xs={12} md={6}>
+          <Paper elevation={3} sx={{ p: 2, display: 'flex', flexDirection: 'column', height: '100%' }}>
+            <Typography variant="h6" gutterBottom>Recent Activity</Typography>
+            
+            <Typography variant="body2" color="textSecondary" sx={{ mt: 2 }}>
+              No recent trading activity to display. Start trading to view performance metrics and transaction history.
+            </Typography>
+            
+            <Box sx={{ flex: 1, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
+              <Button variant="outlined" color="primary">
+                View Trading History
+              </Button>
+            </Box>
+          </Paper>
+        </Grid>
+        
+        {/* System Status Panel */}
+        <Grid item xs={12}>
+          <Paper elevation={3} sx={{ p: 2 }}>
+            <Typography variant="h6" gutterBottom>System Status</Typography>
+            
+            <Grid container spacing={2}>
+              {/* FreqTrade Status */}
+              <Grid item xs={12} sm={4}>
+                <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
+                  <Typography variant="body2">FreqTrade:</Typography>
+                  <Typography variant="body2" color="error">Offline</Typography>
+                </Box>
+              </Grid>
+              
+              {/* AI Models Status */}
+              <Grid item xs={12} sm={4}>
+                <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
+                  <Typography variant="body2">AI Models:</Typography>
+                  <Typography variant="body2" color="success.main">Online</Typography>
+                </Box>
+              </Grid>
+              
+              {/* Database Status */}
+              <Grid item xs={12} sm={4}>
+                <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
+                  <Typography variant="body2">Database:</Typography>
+                  <Typography variant="body2" color="success.main">Connected</Typography>
+                </Box>
+              </Grid>
+            </Grid>
+          </Paper>
+        </Grid>
+      </Grid>
     </Container>
-  )
+  );
 }
\ No newline at end of file
diff --git a/frontend/next.config.js b/frontend/next.config.js
index e0e2f1a..2c5507e 100644
--- a/frontend/next.config.js
+++ b/frontend/next.config.js
@@ -1,25 +1,41 @@
-/** @type {import('next').NextConfig} */
+/**
+ * Next.js Configuration for AlgoTradePro5 Frontend
+ * 
+ * This configuration ensures proper App Router setup and removes any conflicts
+ * with the Pages Router. It also includes optimizations for development and production.
+ */
+
 const nextConfig = {
-  reactStrictMode: true,
-  async rewrites() {
-    return [
-      {
-        source: '/api/:path*',
-        destination: 'http://localhost:8080/api/:path*',
-      },
-      {
-        source: '/ws',
-        destination: 'http://localhost:8080/ws',
-      },
-    ];
+  // Enable experimental features for optimized performance
+  experimental: {
+    optimizeCss: true,
   },
+
+  // Configure path aliases for cleaner imports
   webpack: (config) => {
-    config.experiments = {
-      ...config.experiments,
-      topLevelAwait: true,
+    config.resolve.alias = {
+      ...config.resolve.alias,
+      '@': __dirname,
     };
     return config;
   },
+
+  // Define page extensions to include TypeScript and JavaScript files
+  pageExtensions: ['tsx', 'ts', 'jsx', 'js'],
+
+  // Disable image optimization in development for faster builds
+  images: {
+    unoptimized: process.env.NODE_ENV !== 'production',
+  },
+
+  // Enable React Strict Mode for better debugging
+  reactStrictMode: true,
+
+  // Configure environment variables for runtime
+  env: {
+    NEXT_PUBLIC_WS_URL: process.env.NEXT_PUBLIC_WS_URL,
+    NEXT_PUBLIC_API_BASE_URL: process.env.NEXT_PUBLIC_API_BASE_URL,
+  },
 };
 
 module.exports = nextConfig;
diff --git a/frontend/package.json b/frontend/package.json
index 088f0e4..d2e1242 100644
--- a/frontend/package.json
+++ b/frontend/package.json
@@ -1,25 +1,43 @@
 {
-  "name": "frontend",
+  "name": "algotradepro5-frontend",
   "version": "1.0.0",
   "private": true,
   "scripts": {
-    "dev": "next dev"
+    "dev": "ts-node scripts/verify-config.ts && next dev",
+    "build": "ts-node scripts/verify-config.ts && next build",
+    "start": "ts-node scripts/verify-config.ts && next start",
+    "lint": "next lint",
+    "test": "jest",
+    "test:watch": "jest --watch",
+    "test:coverage": "jest --coverage",
+    "verify-config": "ts-node scripts/verify-config.ts"
   },
   "devDependencies": {
     "@babel/plugin-transform-react-jsx": "^7.25.9",
     "@emotion/babel-plugin": "^11.13.5",
+    "@testing-library/jest-dom": "^5.16.5",
+    "@testing-library/react": "^14.0.0",
+    "@types/jest": "^29.5.2",
     "@types/msgpack-lite": "^0.1.11",
-    "@types/node": "^22.13.13",
-    "@types/react": "^19.0.12",
-    "typescript": "^5.8.2"
+    "@types/node": "20.3.3",
+    "@types/react": "18.2.14",
+    "@types/react-dom": "18.2.6",
+    "eslint": "8.44.0",
+    "eslint-config-next": "13.4.7",
+    "jest": "^29.5.0",
+    "jest-environment-jsdom": "^29.5.0",
+    "ts-jest": "^29.1.0",
+    "ts-node": "^10.9.1",
+    "typescript": "5.1.6",
+    "whatwg-fetch": "^3.6.20"
   },
   "dependencies": {
     "@emotion/cache": "^11.14.0",
-    "@emotion/react": "^11.14.0",
+    "@emotion/react": "^11.11.1",
     "@emotion/server": "^11.11.0",
-    "@emotion/styled": "^11.14.0",
+    "@emotion/styled": "^11.11.0",
     "@mui/icons-material": "^6.4.8",
-    "@mui/material": "^6.4.8",
+    "@mui/material": "^6.4.9",
     "@mui/material-nextjs": "^6.4.3",
     "@types/react-window": "^1.8.8",
     "@types/socket.io-client": "^1.4.36",
@@ -27,10 +45,10 @@
     "chartjs-adapter-date-fns": "^3.0.0",
     "date-fns": "^4.1.0",
     "msgpack-lite": "^0.1.26",
-    "next": "^15.2.4",
-    "react": "^19.0.0",
+    "next": "13.4.7",
+    "react": "18.2.0",
     "react-chartjs-2": "^5.3.0",
-    "react-dom": "^19.0.0",
+    "react-dom": "18.2.0",
     "react-virtualized-auto-sizer": "^1.0.25",
     "react-window": "^1.8.11",
     "socket.io-client": "^4.8.1"
diff --git a/frontend/src/components/ErrorBoundary/WebSocketErrorBoundary.tsx b/frontend/src/components/ErrorBoundary/WebSocketErrorBoundary.tsx
index 13cb062..c9a4f54 100644
--- a/frontend/src/components/ErrorBoundary/WebSocketErrorBoundary.tsx
+++ b/frontend/src/components/ErrorBoundary/WebSocketErrorBoundary.tsx
@@ -1,53 +1,141 @@
+'use client';
+
 import React, { Component, ErrorInfo, ReactNode } from 'react';
 import { Box, Alert, AlertTitle, Button } from '@mui/material';
+import { logger } from '@/src/utils/logger';
 
+/**
+ * Interface for WebSocketErrorBoundary props
+ * @interface Props
+ * @property {ReactNode} children - Child components to be wrapped by the error boundary
+ */
 interface Props {
   children: ReactNode;
 }
 
+/**
+ * Interface for WebSocketErrorBoundary state
+ * @interface State
+ * @property {boolean} hasError - Flag indicating if an error has occurred
+ * @property {Error | null} error - The error object if one exists
+ * @property {ErrorInfo | null} errorInfo - React error info object containing component stack
+ */
 interface State {
   hasError: boolean;
   error: Error | null;
   errorInfo: ErrorInfo | null;
 }
 
+/**
+ * WebSocketErrorBoundary Component
+ * 
+ * Handles WebSocket connection errors and provides a user-friendly error UI with retry functionality.
+ * Implements React's Error Boundary pattern to catch and handle errors in child components.
+ * 
+ * Features:
+ * - Catches and logs WebSocket related errors
+ * - Provides a retry mechanism for failed connections
+ * - Displays user-friendly error messages
+ * - Integrates with the application's logging system
+ * 
+ * @extends {Component<Props, State>}
+ */
 export class WebSocketErrorBoundary extends Component<Props, State> {
+  /**
+   * Initialize component state
+   * @type {State}
+   */
   public state: State = {
     hasError: false,
     error: null,
     errorInfo: null
   };
 
+  /**
+   * Static method to derive error state from caught errors
+   * @param {Error} error - The error that was caught
+   * @returns {State} New state object with error information
+   */
   public static getDerivedStateFromError(error: Error): State {
+    // Log the error when it's first caught
+    logger.error('WebSocket error caught in boundary', {
+      error: error.message,
+      stack: error.stack,
+      timestamp: new Date().toISOString()
+    });
+
     return { hasError: true, error, errorInfo: null };
   }
 
+  /**
+   * Lifecycle method called when an error occurs in a child component
+   * @param {Error} error - The error that was caught
+   * @param {ErrorInfo} errorInfo - React error info object with component stack
+   */
   public componentDidCatch(error: Error, errorInfo: ErrorInfo) {
+    // Log detailed error information
+    logger.critical('WebSocket Error Boundary caught an error', {
+      error: {
+        message: error.message,
+        stack: error.stack,
+        type: error.name
+      },
+      componentStack: errorInfo.componentStack,
+      timestamp: new Date().toISOString()
+    });
+
     this.setState({
       error: error,
       errorInfo: errorInfo
     });
-    console.error('WebSocket Error:', error, errorInfo);
   }
 
+  /**
+   * Handles retry attempts for WebSocket connections
+   * Resets error state and triggers reconnection
+   */
   private handleRetry = () => {
+    logger.info('Attempting WebSocket reconnection', {
+      timestamp: new Date().toISOString(),
+      previousError: this.state.error?.message
+    });
+
     this.setState({ hasError: false, error: null, errorInfo: null });
+
+    // Log the retry attempt
+    logger.debug('WebSocket error state reset', {
+      timestamp: new Date().toISOString()
+    });
   };
 
-  public render() {
+  /**
+   * Renders either the error UI or the wrapped children
+   * @returns {ReactNode} The rendered component
+   */
+  public render(): ReactNode {
     if (this.state.hasError) {
       return (
         <Box sx={{ p: 3, maxWidth: 600, mx: 'auto', mt: 4 }}>
           <Alert 
             severity="error" 
             action={
-              <Button color="inherit" size="small" onClick={this.handleRetry}>
+              <Button 
+                color="inherit" 
+                size="small" 
+                onClick={this.handleRetry}
+                data-testid="websocket-retry-button"
+              >
                 RETRY CONNECTION
               </Button>
             }
           >
             <AlertTitle>Connection Error</AlertTitle>
             {this.state.error?.message || 'Failed to connect to trading server'}
+            {process.env.NODE_ENV === 'development' && (
+              <Box sx={{ mt: 2, fontSize: '0.8rem', color: 'text.secondary' }}>
+                {this.state.errorInfo?.componentStack}
+              </Box>
+            )}
           </Alert>
         </Box>
       );
diff --git a/frontend/src/hooks/useWebSocket.ts b/frontend/src/hooks/useWebSocket.ts
index 7701951..e56f4de 100644
--- a/frontend/src/hooks/useWebSocket.ts
+++ b/frontend/src/hooks/useWebSocket.ts
@@ -1,101 +1,142 @@
-import { useEffect, useRef, useState, useCallback } from 'react';
-import msgpack from 'msgpack-lite';
+/**
+ * WebSocket Hook for AlgoTradePro5
+ * 
+ * Provides React components with WebSocket functionality:
+ * - Connection management
+ * - Real-time data subscription
+ * - Error handling
+ * - Auto-reconnection
+ * 
+ * @example
+ * ```tsx
+ * function TradeComponent() {
+ *   const { 
+ *     subscribe, 
+ *     send, 
+ *     connectionState 
+ *   } = useWebSocket();
+ * 
+ *   useEffect(() => {
+ *     const unsubscribe = subscribe(WSEventType.TRADE_UPDATE, handleTrade);
+ *     return () => unsubscribe();
+ *   }, []);
+ * }
+ * ```
+ */
 
-interface UseWebSocketOptions {
-  url: string;
-  onMessage?: (message: any) => void;
-  reconnectInterval?: number;
-  maxReconnectAttempts?: number;
-}
+import { useState, useEffect, useCallback, useRef } from 'react';
+import { WebSocketService, WSEventType, ConnectionState } from '../services/WebSocketService';
+import { logger } from '@/src/utils/logger';
 
-export type WebSocketConnectionStatus = 'connecting' | 'connected' | 'disconnected';
+// Load WebSocket configuration from environment variables
+const WS_CONFIG = {
+  url: process.env.NEXT_PUBLIC_WS_URL || 'ws://localhost:8080',
+  reconnectInterval: Number(process.env.NEXT_PUBLIC_WS_RECONNECT_INTERVAL) || 5000,
+  maxReconnectAttempts: Number(process.env.NEXT_PUBLIC_WS_MAX_RECONNECT_ATTEMPTS) || 5
+};
 
-export const useWebSocket = ({
-  url,
-  onMessage,
-  reconnectInterval = 3000,
-  maxReconnectAttempts = 5
-}: UseWebSocketOptions) => {
-  const [connectionStatus, setConnectionStatus] = useState<WebSocketConnectionStatus>('disconnected');
-  const [lastMessage, setLastMessage] = useState<any>(null);
-  const wsRef = useRef<WebSocket | null>(null);
-  const reconnectAttemptsRef = useRef(0);
-  const reconnectTimeoutRef = useRef<NodeJS.Timeout>();
+/**
+ * Hook for managing WebSocket connections in React components
+ * @returns WebSocket management functions and state
+ */
+export function useWebSocket() {
+  // Maintain WebSocket service instance across renders
+  const wsRef = useRef<WebSocketService | null>(null);
+  
+  // Track connection state for UI updates
+  const [connectionState, setConnectionState] = useState<ConnectionState>(
+    ConnectionState.DISCONNECTED
+  );
 
-  const connect = useCallback(() => {
+  /**
+   * Initialize WebSocket service
+   */
+  const initializeWebSocket = useCallback(() => {
     try {
-      const ws = new WebSocket(url);
-      wsRef.current = ws;
-      setConnectionStatus('connecting');
+      if (!wsRef.current) {
+        logger.info('Initializing WebSocket hook', {
+          config: WS_CONFIG,
+          timestamp: new Date().toISOString()
+        });
 
-      ws.binaryType = 'arraybuffer';
+        wsRef.current = new WebSocketService(WS_CONFIG);
+        
+        // Subscribe to connection state changes
+        wsRef.current.subscribe(WSEventType.SYSTEM_STATUS, (status) => {
+          setConnectionState(status.connectionState);
+        });
 
-      ws.onopen = () => {
-        setConnectionStatus('connected');
-        reconnectAttemptsRef.current = 0;
-      };
-
-      ws.onmessage = (event) => {
-        try {
-          const message = msgpack.decode(new Uint8Array(event.data));
-          setLastMessage(message);
-          onMessage?.(message);
-        } catch (error) {
-          console.error('Failed to decode message:', error);
-        }
-      };
-
-      ws.onclose = () => {
-        setConnectionStatus('disconnected');
-        wsRef.current = null;
-
-        if (reconnectAttemptsRef.current < maxReconnectAttempts) {
-          reconnectTimeoutRef.current = setTimeout(() => {
-            reconnectAttemptsRef.current += 1;
-            connect();
-          }, reconnectInterval);
-        }
-      };
-
-      ws.onerror = (error) => {
-        console.error('WebSocket error:', error);
-      };
+        wsRef.current.connect();
+      }
     } catch (error) {
-      console.error('Failed to create WebSocket:', error);
-      setConnectionStatus('disconnected');
+      logger.error('Failed to initialize WebSocket hook', {
+        error: error instanceof Error ? {
+          message: error.message,
+          stack: error.stack
+        } : error,
+        timestamp: new Date().toISOString()
+      });
     }
-  }, [url, onMessage, reconnectInterval, maxReconnectAttempts]);
+  }, []);
 
-  const disconnect = useCallback(() => {
-    if (wsRef.current) {
-      wsRef.current.close();
-      wsRef.current = null;
+  /**
+   * Subscribe to WebSocket events
+   */
+  const subscribe = useCallback(<T = any>(
+    type: WSEventType,
+    handler: (data: T) => void
+  ) => {
+    if (!wsRef.current) {
+      logger.warn('Attempted to subscribe before WebSocket initialization', {
+        eventType: type,
+        timestamp: new Date().toISOString()
+      });
+      return () => {};
     }
-    if (reconnectTimeoutRef.current) {
-      clearTimeout(reconnectTimeoutRef.current);
-    }
-    setConnectionStatus('disconnected');
+
+    logger.debug('Component subscribing to WebSocket event', {
+      type,
+      timestamp: new Date().toISOString()
+    });
+
+    return wsRef.current.subscribe(type, handler);
   }, []);
 
-  const sendMessage = useCallback((message: any) => {
-    if (wsRef.current?.readyState === WebSocket.OPEN) {
-      const encoded = msgpack.encode(message);
-      wsRef.current.send(encoded);
-      return true;
+  /**
+   * Send message through WebSocket
+   */
+  const send = useCallback((type: WSEventType, payload: any) => {
+    if (!wsRef.current) {
+      logger.warn('Attempted to send message before WebSocket initialization', {
+        eventType: type,
+        timestamp: new Date().toISOString()
+      });
+      return;
     }
-    return false;
+
+    wsRef.current.send(type, payload);
   }, []);
 
+  /**
+   * Initialize WebSocket on mount
+   */
   useEffect(() => {
-    connect();
+    initializeWebSocket();
+
+    // Cleanup on unmount
     return () => {
-      disconnect();
+      logger.info('Cleaning up WebSocket hook', {
+        timestamp: new Date().toISOString()
+      });
+      
+      wsRef.current?.disconnect();
+      wsRef.current = null;
     };
-  }, [connect, disconnect]);
+  }, [initializeWebSocket]);
 
   return {
-    connectionStatus,
-    lastMessage,
-    sendMessage
+    subscribe,
+    send,
+    connectionState
   };
-};
\ No newline at end of file
+}
\ No newline at end of file
