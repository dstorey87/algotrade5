# syntax=docker/dockerfile:1.4

# Stage 1: Base with CUDA dependencies
FROM nvidia/cuda:11.8.0-cudnn8-runtime-ubuntu22.04 as cuda-base

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    NVIDIA_VISIBLE_DEVICES=all \
    NVIDIA_DRIVER_CAPABILITIES=compute,utility

# Stage 2: Builder with cached dependencies
FROM cuda-base as builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    python3.10 \
    python3-pip \
    python3-dev \
    build-essential \
    git \
    sqlite3 \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /build

# Copy only requirements files first to leverage cache
COPY requirements*.txt ./

# Mount cache and install Python packages
RUN --mount=type=cache,target=/root/.cache/pip \
    pip3 install --no-cache-dir -r requirements-freqai-custom.txt \
    && pip3 install --no-cache-dir -r requirements-freqai.txt \
    && pip3 install --no-cache-dir -r requirements-llm.txt \
    && pip3 install --no-cache-dir -r requirements-quantum.txt \
    && pip3 install --no-cache-dir fastapi uvicorn

# Stage 3: Final runtime image
FROM cuda-base as runtime

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    python3.10 \
    python3-pip \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create app structure
WORKDIR /app
RUN mkdir -p /app/logs /app/models /app/cache

# Copy installed packages from builder
COPY --from=builder /usr/local/lib/python3.10/dist-packages /usr/local/lib/python3.10/dist-packages

# Copy application code
COPY src /app/src

# Set Python path and environment
ENV PYTHONPATH=/app

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8001/health || exit 1

# Expose port
EXPOSE 8001

# Command
CMD ["python3", "/app/src/freqai_interface.py"]