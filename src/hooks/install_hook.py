#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Install Pre-commit Hook for AlgoTradePro5.

This script installs the pre-commit hook into the .git/hooks directory
to ensure it runs automatically when committing changes.
"""

import os
import sys
import stat
import shutil
from pathlib import Path

def get_repo_root():
    """Get the root directory of the Git repository."""
    # Walk up the directory tree until we find .git
    current_dir = os.path.abspath(os.path.dirname(__file__))
    while current_dir != os.path.dirname(current_dir):  # Stop at the root directory
        if os.path.exists(os.path.join(current_dir, ".git")):
            return current_dir
        current_dir = os.path.dirname(current_dir)
    
    print("Error: Not in a Git repository")
    sys.exit(1)

def create_hook_script(hooks_dir, hook_script_path):
    """Create the pre-commit hook script."""
    hook_path = os.path.join(hooks_dir, "pre-commit")
    
    # Create hook content
    hook_content = f"""#!/bin/sh
# AlgoTradePro5 pre-commit hook
# This file was automatically generated by install_hook.py

# Run the Python pre-commit hook
python "{hook_script_path}" "$@"
"""
    
    # Write the hook script
    with open(hook_path, 'w') as f:
        f.write(hook_content)
    
    # Make the hook executable
    os.chmod(hook_path, os.stat(hook_path).st_mode | stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH)
    
    return hook_path

def backup_existing_hook(hooks_dir):
    """Backup any existing pre-commit hook."""
    hook_path = os.path.join(hooks_dir, "pre-commit")
    backup_path = os.path.join(hooks_dir, "pre-commit.backup")
    
    if os.path.exists(hook_path):
        shutil.copy2(hook_path, backup_path)
        print(f"Backed up existing pre-commit hook to {backup_path}")

def create_hook_runner_script(root_dir):
    """Create a script that runs the pre-commit hook."""
    script_dir = os.path.join(root_dir, "src", "hooks")
    os.makedirs(script_dir, exist_ok=True)
    
    runner_path = os.path.join(script_dir, "run_pre_commit.py")
    
    # Create runner content
    runner_content = """#!/usr/bin/env python
# -*- coding: utf-8 -*-
\"\"\"
Pre-commit Hook Runner for AlgoTradePro5.

This script is called by Git when committing changes and runs the pre-commit hook.
\"\"\"

import os
import sys
import logging

# Add the src directory to the Python path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Import the pre-commit hook
from hooks.pre_commit_hook import PreCommitHook

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("logs/pre_commit.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("pre_commit_runner")

def main():
    \"\"\"Main entry point for the pre-commit hook runner.\"\"\"
    try:
        # Create logs directory if it doesn't exist
        os.makedirs("logs", exist_ok=True)
        
        # Create the pre-commit hook
        hook = PreCommitHook()
        
        # Run the pre-commit hook
        success = hook.run_pre_commit_hook()
        
        # Exit with appropriate status code
        sys.exit(0 if success else 1)
    except Exception as e:
        logger.error(f"Pre-commit hook failed with exception: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
"""
    
    # Write the runner script
    with open(runner_path, 'w') as f:
        f.write(runner_content)
    
    # Make the runner executable
    os.chmod(runner_path, os.stat(runner_path).st_mode | stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH)
    
    return runner_path

def main():
    """Main entry point for the hook installer."""
    # Get the repository root
    repo_root = get_repo_root()
    
    # Path to the hooks directory
    hooks_dir = os.path.join(repo_root, ".git", "hooks")
    
    # Create hooks directory if it doesn't exist
    os.makedirs(hooks_dir, exist_ok=True)
    
    # Backup existing hook if it exists
    backup_existing_hook(hooks_dir)
    
    # Create the hook runner script
    runner_path = create_hook_runner_script(repo_root)
    runner_rel_path = os.path.relpath(runner_path, repo_root)
    
    # Create the pre-commit hook script
    hook_path = create_hook_script(hooks_dir, runner_rel_path)
    
    print(f"Pre-commit hook installed successfully at {hook_path}")
    print("The hook will run automatically when you commit changes.")

if __name__ == "__main__":
    main()